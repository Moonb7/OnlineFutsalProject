generator client {
  provider = "prisma-client-js"
  output   = "./generated/UserDBClient"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_USER_URL")
}

model Users {
  userId      Int           @id @default(autoincrement())
  name        String        @unique
  password    String
  rating      Int           @default(1000)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Caches      Caches[]
  EnemyUsers  MatchLogs[]   @relation("EnemyUsers")
  Users       MatchLogs[]   @relation("Users")
  teams       Teams[]
  userPlayers UserPlayers[]

  @@map("Users")
}

model UserPlayers {
  userPlayerId Int      @id @default(autoincrement())
  userId       Int
  playerId     Int
  count        Int
  upgrade      Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  UserPlayer1  Teams[]  @relation("UserPlayer1")
  UserPlayer2  Teams[]  @relation("UserPlayer2")
  UserPlayer3  Teams[]  @relation("UserPlayer3")
  users        Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("UserPlayers")
}

model Teams {
  teamId        Int          @id @default(autoincrement())
  userId        Int
  userPlayerId1 Int?
  userPlayerId2 Int?
  userPlayerId3 Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  users         Users        @relation(fields: [userId], references: [userId], onDelete: Cascade)
  UserPlayer1   UserPlayers? @relation("UserPlayer1", fields: [userPlayerId1], references: [userPlayerId], onDelete: Cascade)
  UserPlayer2   UserPlayers? @relation("UserPlayer2", fields: [userPlayerId2], references: [userPlayerId], onDelete: Cascade)
  UserPlayer3   UserPlayers? @relation("UserPlayer3", fields: [userPlayerId3], references: [userPlayerId], onDelete: Cascade)

  @@map("Teams")
}

model Caches {
  cacheId      Int      @id @default(autoincrement())
  userId       Int
  cacheChange  Int
  cacheSource  Int
  cacheComment String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  users        Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("Caches")
}

model MatchLogs {
  matchLogId  Int      @id @default(autoincrement())
  userId      Int
  enemyUserId Int
  isWin       Int
  playedAt    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  EnemyUsers  Users    @relation("EnemyUsers", fields: [enemyUserId], references: [userId])
  Users       Users    @relation("Users", fields: [userId], references: [userId])

  @@map("MatchLogs")
}
